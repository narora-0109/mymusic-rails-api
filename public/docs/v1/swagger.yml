swagger: "2.0"
info:
  description: |
    This is MyMusic API,a demo for exploring API design best practices in Rails 5.
    To be able to try operations you have to obtain a JSON Web Token, fill  in the token field and press the arrow button next to it.
  version: "1.0.0"
  title: MyMusic
  termsOfService: ""
  contact:
    name: Spiros Kabasakalis
    email: kabasakalis@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: api.app.me:3000
basePath: /v1
schemes:
  - http
consumes:
  - application/json
produces:
  - application/vnd.siren+json
paths:
  /:
    post:
      tags:
        - home
      summary: Home,API Point of Entry
      operationId: home
      responses:
        "200":
          description: "OK"
        "401":
          description: Invalid credentials
  /auth:
    post:
      tags:
        - JWT_Token
      summary: Obtain JSON Web Token (JWT)
      description: If you get a 401 Unauthorized server response you are either
                    unauthenticated or not authorized.You have to
                    provide a JSON  Web Authentication Token (JWT) in the header for every request.
                   You get a new JWT by executing this operation with valid user credentials,JWT is
                   the value of token field in server response.The token can be copied and pasted in
                   TOKEN field (upper left of the window).Pressing the arrow button will populate the header with the token for all subsequent requests.
      operationId: getToken
      parameters:
        - in: body
          name: body
          description: Login to receive a token
          required: true
          schema:
            $ref: "#/definitions/Auth"
      responses:
        "200":
          description: Successful Token retrieval
        "401":
          description: Invalid credentials
        "400":
          description: Bad Request

  /users:
    get:
      tags:
        - user
      summary: Finds all users
      description: Gets all users,paginated result.
      operationId: getAllUsers
      parameters:
        - in: query
          name: role
          description: Filter by role
          required: false
          type: string
          enum: ['user','admin','superadmin']
        - in: query
          name: id
          description: Filter by ids
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      security:
       - Authorization: []
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "404":
          description: Not Found
        "401":
          description: Unauthorized
        "500":
          description: Server Error
        "400":
          description: Bad Request
    post:
      tags:
        - user
      summary: Add a new user
      description: Only Admins and SuperAdmins can create users
      operationId: addUser
      parameters:
        - in: body
          name: body
          description: User to add.You can also create playlists for this user if you are authorized.
          required: false
          schema:
            $ref: "#/definitions/User"
      security:
       - Authorization: []
      responses:
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  /users/{userId}:
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a user
      operationId: getUserById
      parameters:
        - in: path
          name: userId
          description: ID of user that needs to be fetched
          required: true
          type: integer
          format: int64
      security:
       - Authorization: []
      responses:
        "404":
          description: user not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - user
      summary: Updates a user
      description: ""
      operationId: updateUser
      parameters:
        - in: path
          name: userId
          description: ID of user to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated attributes for user.
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "405":
          description: Invalid input
        "404":
          description: user not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid ID supplied
      security:
        - Authorization: []
    delete:
      tags:
        - user
      summary: Deletes a user
      description: ""
      operationId: deleteUser
      parameters:
        - in: path
          name: userId
          description: user id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid user value
        "204":
          description: No Content. Successfully Deleted.
        "404":
          description: User not found
      security:
        - Authorization: []

  /genres:
    get:
      tags:
        - genre
      summary: Finds all genres
      description: Gets all genres,paginated result.
      operationId: getAllGenres
      parameters:
        - in: query
          name: id
          description: Filter by ids
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      security:
       - Authorization: []
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Genre"
        "404":
          description: Not Found
        "401":
          description: Unauthorized
        "500":
          description: Server Error
        "400":
          description: Bad Request
    post:
      tags:
        - genre
      summary: Add a new genre
      description: Only Admins and SuperAdmins can create genres
      operationId: addGenre
      parameters:
        - in: body
          name: body
          description: Genre to add
          required: false
          schema:
            $ref: "#/definitions/Genre"
      security:
       - Authorization: []
      responses:
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  /genres/{genreId}:
    get:
      tags:
        - genre
      summary: Find genre by ID
      description: Returns a genre
      operationId: getgenreById
      parameters:
        - in: path
          name: genreId
          description: ID of genre that needs to be fetched
          required: true
          type: integer
          format: int64
      security:
       - Authorization: []
      responses:
        "404":
          description: genre not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Genre"
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - genre
      summary: Updates a genre
      description: ""
      operationId: updategenre
      parameters:
        - in: path
          name: genreId
          description: ID of genre to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated attributes for genre.
          required: false
          schema:
            $ref: "#/definitions/Genre"
      responses:
        "405":
          description: Invalid input
        "404":
          description: genre not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Genre"
        "400":
          description: Invalid ID supplied
      security:
        - Authorization: []
    delete:
      tags:
        - genre
      summary: Deletes a genre
      description: ""
      operationId: deleteGenre
      parameters:
        - in: path
          name: genreId
          description: genre id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid genre value
        "204":
          description: No Content. Successfully Deleted.
        "404":
          description: Genre not found
      security:
        - Authorization: []

  /artists:
    get:
      tags:
        - artist
      summary: Finds all Artists
      description: Gets all artists,paginated result.
      operationId: getAllArtists
      parameters:
        - in: query
          name: country
          description: Filter by country
          required: false
          type: string
        - in: query
          name: genre
          description: Filter by genre
          required: false
          type: string
        - in: query
          name: id
          description: Filter by ids
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      security:
       - Authorization: []
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Artist"
        "404":
          description: Not Found
        "401":
          description: Unauthorized
        "500":
          description: Server Error
        "400":
          description: Bad Request
    post:
      tags:
        - artist
      summary: Add a new artist
      description: Only Admins and SuperAdmins can create Artists
      operationId: addArtist
      parameters:
        - in: body
          name: body
          description: Artist to add.You can either provide a genre_id (list Genres to find the id) to associate
                       the artist with an existing Genre or provide the title of a new Genre,(in which case you leave
                       genre_id blank).You can also create and associate albums for the new Artist.
          required: false
          schema:
            $ref: "#/definitions/Artist"
      security:
       - Authorization: []
      responses:
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  /artists/{artistId}:
    get:
      tags:
        - artist
      summary: Find artist by ID
      description: Returns an artist
      operationId: getArtistById
      parameters:
        - in: path
          name: artistId
          description: ID of artist that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Artist not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Artist"
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - artist
      summary: Updates an artist
      description: ""
      operationId: updateArtist
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: artistId
          description: ID of artist to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Artist to update
          required: false
          schema:
            $ref: "#/definitions/Artist"
      responses:
        "405":
          description: Invalid input
        "404":
          description: Artist not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Artist"
        "400":
          description: Invalid ID supplied
      security:
        - Authorization: []
    delete:
      tags:
        - artist
      summary: Deletes an artist
      description: ""
      operationId: deleteArtist
      parameters:
        - in: path
          name: artistId
          description: Artist id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid artist value
        "204":
          description: No Content. Successfully Deleted.
      security:
        - Authorization: []

  /albums:
    get:
      tags:
        - album
      summary: Finds all albums
      description: Gets all albums,paginated result.
      operationId: getAllAlbums
      parameters:
        - in: query
          name: year
          description: Filter by Year
          required: false
          type: string
        - in: query
          name: artist
          description: Filter by artist
          required: false
          type: string
        - in: query
          name: id
          description: Filter by ids
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      security:
       - Authorization: []
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Album"
        "404":
          description: Not Found
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Server Error
    post:
      tags:
        - album
      summary: Add a new album
      description: Only Admins and SuperAdmins can create albums
      operationId: addAlbum
      parameters:
        - in: body
          name: body
          description: Album to add.You can provide an artist_id (list artists to find the id) to associate the album with an existing artist. You can also create and associate tracks for the new album.
          required: false
          schema:
            $ref: "#/definitions/Album"
      security:
       - Authorization: []
      responses:
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  /albums/{albumId}:
    get:
      tags:
        - album
      summary: Find album by ID
      description: Returns an album
      operationId: getalbumById
      parameters:
        - in: path
          name: albumId
          description: ID of album that needs to be fetched
          required: true
          type: integer
          format: int64
      security:
       - Authorization: []
      responses:
        "404":
          description: album not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Album"
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - album
      summary: Updates an album
      description: ""
      operationId: updatealbum
      parameters:
        - in: path
          name: albumId
          description: ID of album to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated attributes for album.
          required: false
          schema:
            $ref: "#/definitions/Album"
      responses:
        "405":
          description: Invalid input
        "404":
          description: album not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Album"
        "400":
          description: Invalid ID supplied
      security:
        - Authorization: []
    delete:
      tags:
        - album
      summary: Deletes an album
      description: ""
      operationId: deleteAlbum
      parameters:
        - in: path
          name: albumId
          description: album id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid album value
        "204":
          description: No Content. Successfully Deleted.
        "404":
          description: Album not found
      security:
        - Authorization: []

  /tracks:
    get:
      tags:
        - track
      summary: Finds all tracks
      description: Gets all tracks,paginated result.
      operationId: getAllTracks
      parameters:
        - in: query
          name: artist
          description: Filter by artist
          required: false
          type: string
        - in: query
          name: album
          description: Filter by album
          required: false
          type: string
        - in: query
          name: id
          description: Filter by ids
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      security:
       - Authorization: []
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Track"
        "404":
          description: Not Found
        "401":
          description: Unauthorized
        "500":
          description: Server Error
        "400":
          description: Bad Request
    post:
      tags:
        - track
      summary: Add a new track
      description: Only Admins and SuperAdmins can create tracks
      operationId: addTrack
      parameters:
        - in: body
          name: body
          description: Track to add.You can provide an album_id (list albums to find the id) to associate the track with an existing album. You can also create and associate an album for the new track,in which case you leave album_id blank
          required: false
          schema:
            $ref: "#/definitions/Track"
      security:
       - Authorization: []
      responses:
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  /tracks/{trackId}:
    get:
      tags:
        - track
      summary: Find track by ID
      description: Returns an track
      operationId: getTrackById
      parameters:
        - in: path
          name: trackId
          description: ID of track that needs to be fetched
          required: true
          type: integer
          format: int64
      security:
       - Authorization: []
      responses:
        "404":
          description: track not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Track"
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - track
      summary: Updates a track
      description: ""
      operationId: updateTrack
      parameters:
        - in: path
          name: trackId
          description: ID of track to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated attributes for track.
          required: false
          schema:
            $ref: "#/definitions/Track"
      responses:
        "405":
          description: Invalid input
        "404":
          description: track not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Track"
        "400":
          description: Invalid ID supplied
      security:
        - Authorization: []
    delete:
      tags:
        - track
      summary: Deletes a track
      description: ""
      operationId: deleteTrack
      parameters:
        - in: path
          name: trackId
          description: track id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid track value
        "204":
          description: No Content. Successfully Deleted.
        "404":
          description: Track not found
      security:
        - Authorization: []

  /playlists:
    get:
      tags:
        - playlist
      summary: Finds all playlists
      description: Gets all playlists,paginated result.
      operationId: getAllPlaylists
      parameters:
        - in: query
          name: user
          description: Filter by User's ID
          required: false
          type: string
      security:
       - Authorization: []
      responses:
        "200":
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Playlist"
        "404":
          description: Not Found
        "401":
          description: Unauthorized
        "500":
          description: Server Error
        "400":
          description: Bad Request
    post:
      tags:
        - playlist
      summary: Add a new playlist
      description: Only Admins and SuperAdmins can create playlists
      operationId: addPlaylist
      parameters:
        - in: body
          name: body
          description: Playlist to add.You can provide a user_id (list users  to find the id) to associate the playlist with an existing user. You can also create and associate albums and tracks for the new playlist.
          required: false
          schema:
            $ref: "#/definitions/Playlist"
      security:
       - Authorization: []
      responses:
        "405":
          description: Invalid input
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  /playlists/{playlistId}:
    get:
      tags:
        - playlist
      summary: Find playlist by ID
      description: Returns a playlist
      operationId: getPlaylistById
      parameters:
        - in: path
          name: playlistId
          description: ID of playlist that needs to be fetched
          required: true
          type: integer
          format: int64
      security:
       - Authorization: []
      responses:
        "404":
          description: playlist not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Playlist"
        "400":
          description: Invalid ID supplied
    put:
      tags:
        - playlist
      summary: Updates a playlist
      description: ""
      operationId: updatePlaylist
      parameters:
        - in: path
          name: playlistId
          description: ID of playlist to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated attributes for playlist.
          required: false
          schema:
            $ref: "#/definitions/Playlist"
      responses:
        "405":
          description: Invalid input
        "404":
          description: playlist not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Playlist"
        "400":
          description: Invalid ID supplied
      security:
        - Authorization: []
    delete:
      tags:
        - playlist
      summary: Deletes a playlist
      description: ""
      operationId: deletePlaylist
      parameters:
        - in: path
          name: playlistId
          description: playlist id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid playlist value
        "204":
          description: No Content. Successfully Deleted.
        "404":
          description: Playlist not found
      security:
        - Authorization: []

securityDefinitions:
  Authorization:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Auth:
    type: object
    properties:
      auth:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
          password:
            type: string

  User:
    type: object
    properties:
      user:
        type: object
        required:
          - email
          - password
          - role
        properties:
          name:
            type: string
            description: username
          email:
            type: string
            description: email
          password:
            type: string
            description: password (at least 8 characters)
          password_confirmation:
            type: string
            description: password confirmation
          role:
            type: string
            enum: ['user','admin','superadmin']
          playlists_attributes:
            description: playlists that this track belongs to
            type: array
            items:
              type: object
              properties:
                title:
                  type: string

  UserNested:
    type: object
    required:
      - email
      - password
      - role
    properties:
      name:
        type: string
        description: username
      email:
        type: string
        description: email
      password:
        type: string
        description: password (at least 8 characters)
      password_confirmation:
        type: string
        description: password confirmation
      role:
        type: string
        enum: ['user','admin','superadmin']

  Genre:
    type: object
    required:
      - title
    properties:
      title:
        type: string
        description: Name of new Genre to add.
  Artist:
    type: object
    properties:
      artist:
        type: object
        required:
          - title
        properties:
          genre_id:
            type: integer
            format: int64
          title:
            type: string
            example: Myrath
            description: Name of band or album.
          country:
            type: string
            example: Tunisia
            description: artist's country of origin.
          genre_attributes:
            $ref: "#/definitions/Genre"
          albums_attributes:
            description: artist's albums
            type: array
            items:
              $ref: "#/definitions/AlbumNested"
  ArtistNested:
    type: object
    required:
      - title
    properties:
      genre_id:
        type: integer
        format: int64
      title:
        type: string
        example: Myrath
        description: Name of band or artist.
      country:
        type: string
        example: USA
        description: artist's country of origin.
      genre_attributes:
        $ref: "#/definitions/Genre"
  Album:
    type: object
    properties:
      album:
        type: object
        required:
          - title
        properties:
          artist_id:
            type: integer
            format: int64
          title:
            type: string
          year:
            type: integer
            format: int32
          tracks_attributes:
            description: Tracks on this album
            type: array
            items:
              $ref: "#/definitions/TrackNested"
  AlbumNested:
    type: object
    required:
      - title
    properties:
      title:
        type: string
      year:
        type: integer
        format: int32
  Track:
    type: object
    properties:
      track:
        type: object
        required:
          - title
        properties:
          title:
            type: string
          time:
            type: string
          album_id:
            type: integer
            format: int64
          album_attributes:
            description: album this track belongs to
            $ref: "#/definitions/AlbumNested"
  TrackNested:
    type: object
    required:
      - title
    properties:
      title:
        type: string
      time:
        type: string
  Playlist:
    type: object
    properties:
      playlist:
        type: object
        required:
          - title
        properties:
          title:
            type: string
          user_id:
            type: integer
            format: int64
          tracks_attributes:
            description: tracks in this playlist
            type: array
            items:
              $ref: "#/definitions/TrackNested"
          albums_attributes:
            description: albums in this playlist
            type: array
            items:
              $ref: "#/definitions/AlbumNested"
  PlaylistNested:
    type: object
    required:
      - title
    properties:
      title:
        type: string
      tracks_attributes:
        description: tracks in this playlist
        type: array
        items:
          $ref: "#/definitions/TrackNested"
      albums_attributes:
        description: albums in this playlist
        type: array
        items:
          $ref: "#/definitions/AlbumNested"






